-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.

-- Это скрипт для создания таблиц базы данных. Для добавления через IntelliJIDEA Ultimate
-- подключитесь к базе данных (или создайте ее, после подключитесь) и выполните этот скрипт через
-- контекстное меню: Run Sql.
-- Если отсутствует IDE IntelliJIDEA, используйте любую СУБД, чтобы добавить
-- эти таблицы.


BEGIN;


CREATE TABLE IF NOT EXISTS public.address
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    city character varying(16) COLLATE pg_catalog."default",
    region character varying(30) COLLATE pg_catalog."default",
    area character varying(20) COLLATE pg_catalog."default",
    street character varying(15) COLLATE pg_catalog."default" NOT NULL,
    house character varying(5) COLLATE pg_catalog."default" NOT NULL,
    apartment numeric(3, 0),
    CONSTRAINT address_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.driver
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    first_name character varying(25) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(25) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    birth_day date,
    gender character varying(10) COLLATE pg_catalog."default",
    license bigint NOT NULL,
    CONSTRAINT driver_pkey PRIMARY KEY (id),
    CONSTRAINT one_license_only UNIQUE (license)
        INCLUDE(license),
    CONSTRAINT "fk_driver-license__license-serial_number" FOREIGN KEY (license)
        REFERENCES public.license (serial_number) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT gender_male_female_only CHECK (gender::text = 'мужской'::text OR gender::text = 'женский'::text)
);


COMMENT ON TABLE public.driver
    IS 'Presents a driver data
Required tables:
License
Required for:
Travel
';

CREATE TABLE IF NOT EXISTS public.license
(
    serial_number bigint NOT NULL,
    gibdd_number character varying(4) COLLATE pg_catalog."default" NOT NULL,
    region character varying(20) COLLATE pg_catalog."default" NOT NULL,
    categories character varying(3)[] COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT license_pkey PRIMARY KEY (serial_number)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    travel_number integer NOT NULL,
    time_count time without time zone NOT NULL,
    travelled integer NOT NULL,
    bonus money NOT NULL,
    tariff_time money NOT NULL,
    tariff_distance money NOT NULL,
    CONSTRAINT payment_pkey PRIMARY KEY (travel_number)
);

CREATE TABLE IF NOT EXISTS public.route
(
    route_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    departure integer NOT NULL,
    destination integer NOT NULL,
    distance integer NOT NULL,
    CONSTRAINT route_pkey PRIMARY KEY (route_id),
    CONSTRAINT "fk_address-id__route-departure" FOREIGN KEY (departure)
        REFERENCES public.address (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "fk_address-id__route-destination" FOREIGN KEY (destination)
        REFERENCES public.address (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT cannot_one_point CHECK (departure <> destination)
);

CREATE TABLE IF NOT EXISTS public.servicing
(
    tabel_number integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    traveled integer NOT NULL,
    engine_state character varying(20) COLLATE pg_catalog."default" NOT NULL,
    transmission_state character varying(20) COLLATE pg_catalog."default" NOT NULL,
    common_state character varying(20) COLLATE pg_catalog."default" NOT NULL,
    last_service date NOT NULL,
    CONSTRAINT servicing_pkey PRIMARY KEY (tabel_number),
    CONSTRAINT "fk_servicing-vehicle_id__vehicle-id" FOREIGN KEY (tabel_number)
        REFERENCES public.vehicle (tabel_number) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT only_same_value_in_column_engine_state CHECK (engine_state::text = 'Исправен'::text OR engine_state::text = 'Необходимо обслужить'::text OR engine_state::text = 'Неисправен'::text),
    CONSTRAINT only_same_value_in_column_transmission_state CHECK (transmission_state::text = 'Исправна'::text OR transmission_state::text = 'Необходимо обслужить'::text OR transmission_state::text = 'Неисправна'::text),
    CONSTRAINT only_same_value_in_column_common_state CHECK (common_state::text = 'Исправен'::text OR common_state::text = 'Необходимо обслужить'::text OR common_state::text = 'Неисправен'::text)
)

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.servicing
    OWNER to postgres;

CREATE TABLE IF NOT EXISTS public.travel
(
    travel_number integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    vehicle integer NOT NULL,
    driver integer NOT NULL,
    route integer NOT NULL,
    task_description text COLLATE pg_catalog."default" NOT NULL,
    started time without time zone,
    finished time without time zone,
    travel_date date NOT NULL,
    CONSTRAINT travel_pkey PRIMARY KEY (travel_number)
);

CREATE TABLE IF NOT EXISTS public.vehicle
(
    tabel_number integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    gos_num_sign character varying(6) COLLATE pg_catalog."default" NOT NULL,
    model character varying(25) COLLATE pg_catalog."default" NOT NULL,
    vehicle_type character varying(12) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Легковой'::character varying,
    manufactured character varying(4) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT vehicle_pkey PRIMARY KEY (tabel_number),
    CONSTRAINT unique_gos_sign UNIQUE (gos_num_sign)
        INCLUDE(gos_num_sign)
);

ALTER TABLE IF EXISTS public.driver
    ADD CONSTRAINT "fk_driver-license__license-serial_number" FOREIGN KEY (license)
    REFERENCES public.license (serial_number) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS one_license_only
    ON public.driver(license);


ALTER TABLE IF EXISTS public.payment
    ADD CONSTRAINT "fk_payment-travel_number__travel-number" FOREIGN KEY (travel_number)
    REFERENCES public.travel (travel_number) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS payment_pkey
    ON public.payment(travel_number);


ALTER TABLE IF EXISTS public.route
    ADD CONSTRAINT "fk_address-id__route-departure" FOREIGN KEY (departure)
    REFERENCES public.address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.route
    ADD CONSTRAINT "fk_address-id__route-destination" FOREIGN KEY (destination)
    REFERENCES public.address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.travel
    ADD CONSTRAINT "fk_travel-driver__driver-id" FOREIGN KEY (driver)
    REFERENCES public.driver (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.travel
    ADD CONSTRAINT "fk_travel-route__route_travel-id" FOREIGN KEY (route)
    REFERENCES public.route (route_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.travel
    ADD CONSTRAINT "fk_travel-vehicle__vehicle-id" FOREIGN KEY (vehicle)
    REFERENCES public.vehicle (tabel_number) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;